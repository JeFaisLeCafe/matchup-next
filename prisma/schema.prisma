// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  quizzes       Quiz[]
  quizResults   QuizResult[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Quiz {
  id        String       @id @default(cuid())
  title     String
  authorId  String
  author    User         @relation(fields: [authorId], references: [id])
  questions Question[]
  results   QuizResult[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Question {
  id      String   @id @default(cuid())
  text    String
  order   Int
  quizId  String
  quiz    Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers Answer[]
}

model Answer {
  id         String   @id @default(cuid())
  imageUrl   String
  order      Int
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuizResult {
  id        String   @id @default(cuid())
  userId    String
  quizId    String
  answers   String   // SQLite doesn't support JSON, so we'll store it as a string
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  quiz      Quiz     @relation(fields: [quizId], references: [id])
}